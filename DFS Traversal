import java.util.ArrayList;

public class Solution {
    public static void dfs(int node,boolean[] visited,ArrayList<ArrayList<Integer>> adj,ArrayList<Integer> temp){
        temp.add(node);
        visited[node]=true;
        for(Integer ngh:adj.get(node)){
            if(visited[ngh]==false){
                dfs(ngh,visited,adj,temp);
            }
        }
    }
    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();

        for(int i=0;i<v;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.size();i++){
            adj.get(edges.get(i).get(0)).add(edges.get(i).get(1));
            adj.get(edges.get(i).get(1)).add(edges.get(i).get(0));
        }
//         System.out.println(adj);
        boolean[] visited=new boolean[v];
        int count=0;
        ArrayList<Integer> temp=new ArrayList<>();
        for(int i=0;i<v;i++){
            if(visited[i]==false){
                count+=1;
                dfs(i,visited,adj,temp);
                ans.add(new ArrayList<>(temp));
//                 System.out.println(ans);
                temp.clear();
            }
        }
        return ans;
    }
}
