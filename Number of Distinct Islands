//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }

            Solution ob = new Solution();
            int ans = ob.countDistinctIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    private String intToString(int r,int c){
        return Integer.toString(r)+" "+Integer.toString(c);
    }
    private void dfs(int row,int col,int[][] grid,int[][] vis,ArrayList<String> temp,int row0,int col0){
        
        vis[row][col]=1;
        temp.add(intToString(row-row0,col-col0));
        int[] rows={-1,0,1,0};
        int[] cols={0,1,0,-1};
        
        int n=grid.length;
        int m=grid[0].length;
        
        for(int i=0;i<4;i++){
            int x_axis=row+rows[i];
            int y_axis=col+cols[i];
            
            if(0<=x_axis && x_axis<n && 0<=y_axis && y_axis<m && grid[x_axis][y_axis]==1 && vis[x_axis][y_axis]==0){
                dfs(x_axis,y_axis,grid,vis,temp,row0,col0);
            }
        }
    }
    int countDistinctIslands(int[][] grid) {
        // Your Code here
        
        int n=grid.length;
        int m=grid[0].length;
        
        int[][] vis=new int[n][m];
        HashSet<ArrayList<String>> hs=new HashSet<>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==0 && grid[i][j]==1){
                    ArrayList<String> temp=new ArrayList<>();
                    dfs(i,j,grid,vis,temp,i,j);
                    hs.add(temp);
                }
            }
        }
        return hs.size();
    }
}
