import java.util.*;

public class Solution {

    public static boolean bfsCheck(int node,ArrayList<ArrayList<Integer>> adj,int[] color){
        Queue<Integer> q=new LinkedList<>();
        q.add(node);
        color[node]=1;
        while(q.size()>0){
            int nde=q.remove();
            for(int it:adj.get(nde)){
                if(color[it]==-1){
                    color[it]=1-color[nde];
                    q.add(it);
                }else if(color[it]==color[nde]){
                    return false;
                }
            }
        }
        return true;
    }
    public static boolean isGraphBirpatite(ArrayList<ArrayList<Integer>> edges) {

        // Write your code here
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<edges.size();i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.size();i++){
            for(int j=0;j<edges.get(i).size();j++){
                if(edges.get(i).get(j)==1){
                    adj.get(i).add(j);
                }
            }
        }
//         System.out.println(adj);
        int n=edges.size();
        int[] color=new int[n];
        Arrays.fill(color,-1);
        
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(!bfsCheck(i,adj,color)){
                    return false; 
                }
            }
        }
        return true;
    }
}
