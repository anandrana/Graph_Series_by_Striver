//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
@SuppressWarnings("unchecked") class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int edges[][] = new int[m][3];
            for (int i = 0; i < m; i++) {
                edges[i][0] = sc.nextInt();
                edges[i][1] = sc.nextInt();
                edges[i][2] = sc.nextInt();
            }
            Solution obj = new Solution();
            List<Integer> ans = obj.shortestPath(n, m, edges);
            for (int e : ans) {
                System.out.print(e + " ");
            }
            System.out.println();
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Pair{
    int distance;
    int node;
   
    
    public Pair(int distance,int node){
        this.distance=distance;
        this.node=node;
    }
}
class Solution {
    public static List<Integer> shortestPath(int n, int m, int edges[][]) {
        // code here
        
        int[] dis=new int[n+1];
        int[] parent=new int[n+1];
        ArrayList<ArrayList<ArrayList<Integer>>> adj=new ArrayList<>();
        
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<ArrayList<Integer>>());
        }
        // System.out.println(adj);
        
        for(int i=0;i<m;i++){
            ArrayList<Integer> t1=new ArrayList<>();
            ArrayList<Integer> t2=new ArrayList<>();
            
            int u=edges[i][0];
            int v=edges[i][1];
            int w=edges[i][2];
            
            t1.add(v);
            t1.add(w);
            
            t2.add(u);
            t2.add(w);
            
            adj.get(u).add(t1);
            adj.get(v).add(t2);
        }
        
        // System.out.println(adj);
        
        PriorityQueue<Pair> pq=new PriorityQueue<Pair>((x,y)->x.distance-y.distance);
        
        pq.add(new Pair(0,1));
        
        for(int i=0;i<=n;i++){
            dis[i]=(int)(1e9);
            parent[i]=i;
        }
        
        dis[1]=0;
        
        
        while(!pq.isEmpty()){
            int distance=pq.peek().distance;
            int node=pq.peek().node;
        
            pq.remove();

            for(int i=0;i<adj.get(node).size();i++){
                
                int edgeWeight=adj.get(node).get(i).get(1);
                int adjNode=adj.get(node).get(i).get(0);
                
                if(distance+edgeWeight < dis[adjNode]){
                    dis[adjNode]=distance+edgeWeight;
                    parent[adjNode]=node;
                    pq.add(new Pair(dis[adjNode],adjNode));
                }
                
            }
        }
        List<Integer> path=new ArrayList<>();
        
        if(dis[n]==1e9){
            path.add(-1);
            return path;
        }
        
        int node=n;
        while(parent[node]!=node){
            path.add(node);
            node=parent[node];
        }
        path.add(1);
        Collections.reverse(path);
        return path;
        
    }
}
