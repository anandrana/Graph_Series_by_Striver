import java.util.*;

public class Solution {
    public static void bfs(int v,boolean[] visited,ArrayList<TreeSet<Integer>> adj,ArrayList<Integer> ans){
        Queue<Integer> q=new LinkedList<>();
        q.add(v);
        
        while(q.size()>0){
                int node=q.poll();
                visited[node]=true;
                ans.add(node);
                for(Integer ngh:adj.get(node)){
                    if(visited[ngh]==false){
                        visited[ngh]=true;
                        q.add(ngh);
                    }
                }
            
        }
    }
	public static ArrayList<Integer> BFS(int vertex, int edges[][]){
		// WRITE YOUR CODE HERE
        ArrayList<TreeSet<Integer>> adj=new ArrayList<>();
        ArrayList<Integer> ans=new ArrayList<>();
        for(int i=0;i<vertex;i++){
            adj.add(new TreeSet<>());
        }
        for(int i=0;i<edges[0].length;i++){
            
            adj.get(edges[0][i]).add(edges[1][i]);
            adj.get(edges[1][i]).add(edges[0][i]);
        }
//         System.out.println(adj);
        boolean[] visited=new boolean[vertex];
        for(int v=0;v<vertex;v++){
                if(visited[v]==false){
                    bfs(v,visited,adj,ans);
                }
            }
        return ans;
        }
}

